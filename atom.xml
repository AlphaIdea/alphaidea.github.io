<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://alphaidea.github.io</id>
    <title>文詣不文藝</title>
    <updated>2019-12-22T02:06:09.219Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://alphaidea.github.io"/>
    <link rel="self" href="https://alphaidea.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://alphaidea.github.io/images/avatar.png</logo>
    <icon>https://alphaidea.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, 文詣不文藝</rights>
    <entry>
        <title type="html"><![CDATA[Git Commit Message]]></title>
        <id>https://alphaidea.github.io/post/git-commit-message</id>
        <link href="https://alphaidea.github.io/post/git-commit-message">
        </link>
        <updated>2019-12-21T03:17:08.000Z</updated>
        <content type="html"><![CDATA[<h1 id="优雅地提交-git-commit-message">优雅地提交 Git Commit Message</h1>
<h2 id="why">Why</h2>
<p>如果在版本回退的时候看到一大段完全不知所云的 Commit，大概会是一种非常糟心的体验。而规范的提交后，只需要看标识符就可以明白提交的目的。</p>
<h3 id="方便浏览">方便浏览</h3>
<p>提供更多的信息，方便排查与回退</p>
<pre><code class="language-bash">git log HEAD --pretty=format:%s
</code></pre>
<h3 id="便于查找">便于查找</h3>
<p>过滤关键字，迅速定位</p>
<pre><code class="language-bash"># 查找新增功能
git log HEAD --grep feat
</code></pre>
<h2 id="git-commit-规范">Git Commit 规范</h2>
<pre><code class="language-git">&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;
&lt;BLANK LINE&gt;
&lt;body&gt;
&lt;BLANK LINE&gt;
&lt;footer&gt;
</code></pre>
<h3 id="header">Header</h3>
<p>Header 仅有一行，包含三个字段</p>
<ul>
<li>type（必需）：用于说明 commit 的类别</li>
<li>scope（可选）：用于说明 commit 影响的范围，比如数据层、控制层、视图层等，视项目不同而不同</li>
<li>subject（必需）：commit 目的的简短描述
<ul>
<li>首字母不大写</li>
<li>末尾不要标点</li>
<li>以动词开头，使用第一人称现在时，比如 change，而不是 changed 或 changes</li>
</ul>
</li>
</ul>
<h4 id="type-只允许使用下面-7-个标识">type 只允许使用下面 7 个标识</h4>
<ul>
<li>feat：新功能（feature）</li>
<li>fix：修复 bug</li>
<li>docs：文档（documentation）</li>
<li>style： 格式（不影响代码逻辑）</li>
<li>refactor：重构（既不是新增功能，也不是修改 bug 的- 代码变动）</li>
<li>test：增加测试（单元测试、集成测试）</li>
<li>chore：构建过程或辅助工具的变动</li>
<li><em><strong>revert：回滚到某一个版本</strong></em></li>
</ul>
<h3 id="body">Body</h3>
<p>Body 是对本次 commit 的详细描述，可分成多行。应说明代码变动的动机，以及与以前功能的对比。</p>
<h3 id="footer">Footer</h3>
<p>该部分用于两种情况：</p>
<ul>
<li>不兼容的变动：与上一个版本不兼容，则 Footer 部分以 BREAKING CHANGE 开头</li>
<li>关闭 Issue：commit 针对某个 issue，在 Footer 中可以写上 Closes #123</li>
</ul>
<h3 id="特殊情况-revert">特殊情况 Revert</h3>
<p>有一种特殊情况，如果当前 commit 用于撤销以前的 commit：</p>
<p>必须以 revert: 开头，后面跟着被撤销 Commit 的 Header<br>
Body 部分的格式是固定的，必须写成 This reverts commit &lt;hash&gt;.<br>
hash 为被撤销 commit 的 SHA 标识符</p>
<h3 id="好的格式">好的格式</h3>
<blockquote>
<p>50-character subject line</p>
<p>72-character wrapped longer description. This should answer:</p>
<ul>
<li>Why was this change necessary?</li>
<li>How does it address the problem?</li>
<li>Are there any side effects?</li>
</ul>
<p>Include a link to the ticket, if any.</p>
<p>Add co-authors if you worked on this code with others:</p>
<p>Co-authored-by: Full Name <a href="mailto:email@example.com">email@example.com</a><br>
Co-authored-by: Full Name <a href="mailto:email@example.com">email@example.com</a></p>
</blockquote>
<h2 id="git-分支与版本发布规范">Git 分支与版本发布规范</h2>
<h3 id="基本原则">基本原则</h3>
<p>master 为保护分支，不直接在 master 上进行代码修改和提交。</p>
<h3 id="日常开发">日常开发</h3>
<p>从 master 分支上 checkout 一个 feature 分支进行开发或者 bugfix 分支进行 bug 修复，功能测试完毕并且项目发布上线后，将 feature 分支合并到主干 master，并且打 Tag 发布，最后删除开发分支。</p>
<h3 id="分支命名规范">分支命名规范</h3>
<p>分支类型_分支发布时间_分支功能。<br>
比如：feature_20191221_git_commit</p>
<p>分支类型包括 feature、 bugfix、refactor 三种类型，<br>
时间使用年月日进行命名，不足 2 位补 0。<br>
分支功能命名使用 snake case 命名法。</p>
<h3 id="tag">Tag</h3>
<p>Tag 包括 3 位版本，前缀使用 v，比如 v0.1.13</p>
<h4 id="tag-命名规范">Tag 命名规范</h4>
<p>新功能开发使用第 2 位版本号，bug 修复使用第 3 位版本号</p>
<p>核心基础库可以在大版本发布前使用灰度版本号，即在版本后面加上后缀，用中划线分隔。alpha 或者 beta 后面加上次数，即第几次 alpha：</p>
<p>v2.0.0-alpha.1</p>
<p>v2.0.0-beta.2</p>
<p>版本正式发布前需要生成 changelog 文档，然后再发布上线。</p>
<hr>
<p><em>规范没有绝对的好坏，只要适合团队和个人就行</em></p>
<p><em>好的习惯尽早养成，受益终身</em></p>
<h2 id="reference">Reference</h2>
<p><a href="https://github.com/angular/angular.js/blob/master/DEVELOPERS.md#commits" title="angular">AngularJS Commits</a></p>
<p><a href="https://www.conventionalcommits.org" title="Conventional Commits">Conventional Commits</a></p>
<p><a href="https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html" title="Tim Pope">A Note About Git Commit Messages</a></p>
<p><a href="http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html" title="阮一峰老师">Commit message 和 Change log 编写指南</a></p>
<p><a href="https://thoughtbot.com/blog/5-useful-tips-for-a-better-commit-message" title="thoughtbot">5 Useful Tips For A Better Commit Message</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JavaScript 数字取整]]></title>
        <id>https://alphaidea.github.io/post/javascript-shu-zi-qu-zheng</id>
        <link href="https://alphaidea.github.io/post/javascript-shu-zi-qu-zheng">
        </link>
        <updated>2019-12-21T03:03:42.000Z</updated>
        <content type="html"><![CDATA[<h1 id="数字取整">数字取整</h1>
<p>实际开发过程中经常遇到数字取整问题，于是整理一下，方便查询</p>
<h2 id="直接取整">直接取整</h2>
<p>将数字的小数部分去掉，只保留整数部分</p>
<pre><code class="language-javascript">Number.parseInt(3.14); // 3
Number.parseInt(3.54); // 3
Number.parseInt(-3.14); // -3
Number.parseInt(-3.54); // -3

Math.trunc(3.14); // 3
Math.trunc(3.54); // 3
Math.trunc(-3.14); // -3
Math.trunc(-3.54); // -3
</code></pre>
<h2 id="四舍五入">四舍五入</h2>
<p>将数值四舍五入为最接近的整数</p>
<pre><code class="language-javascript">Math.round(3.14); // 3
Math.round(3.54); // 4
Math.round(-3.14); // -3
Math.round(-3.54); // -4
</code></pre>
<h2 id="向下取整">向下取整</h2>
<p>取向下最接近的整数</p>
<pre><code class="language-javascript">Math.floor(3.14); // 3
Math.floor(3.54); // 3
Math.floor(-3.14); // -4
Math.floor(-3.54); // -4
</code></pre>
<h2 id="向上取整">向上取整</h2>
<p>取向上最接近的整数</p>
<pre><code class="language-javascript">Math.ceil(3.14); // 4
Math.ceil(3.54); // 4
Math.ceil(-3.14); // -3
Math.ceil(-3.54); // -3
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Git 常用命令]]></title>
        <id>https://alphaidea.github.io/post/git-frequent-command</id>
        <link href="https://alphaidea.github.io/post/git-frequent-command">
        </link>
        <updated>2019-12-05T09:31:55.000Z</updated>
        <content type="html"><![CDATA[<h1 id="git-常用命令">Git 常用命令</h1>
<h2 id="拉取远端指定分支">拉取远端指定分支</h2>
<pre><code class="language-bash">git clone -b [branch name] [git url] [local folder name]
</code></pre>
<h2 id="分支">分支</h2>
<h3 id="下载远程仓库的所有变动">下载远程仓库的所有变动</h3>
<pre><code class="language-bash">git fetch
</code></pre>
<h3 id="列出所有远程分支">列出所有远程分支</h3>
<pre><code class="language-bash">git branch -r
</code></pre>
<h3 id="拉取-xx-分支并合并到本地分支">拉取 xx 分支并合并到本地分支</h3>
<pre><code class="language-bash">git pull origin [branch name]
</code></pre>
<h3 id="切换到指定分支并更新工作区">切换到指定分支，并更新工作区</h3>
<pre><code class="language-bash">git checkout [branch name]
</code></pre>
<h3 id="切换到上一个分支">切换到上一个分支</h3>
<pre><code class="language-bash">git checkout -
</code></pre>
<h2 id="查看信息">查看信息</h2>
<h3 id="显示有变更的文件">显示有变更的文件</h3>
<pre><code class="language-bash">git status
</code></pre>
<h3 id="显示暂存区和工作区的差异">显示暂存区和工作区的差异</h3>
<pre><code class="language-bash">git diff [filename]
</code></pre>
<h2 id="撤销">撤销</h2>
<h3 id="恢复暂存区的指定文件到工作区">恢复暂存区的指定文件到工作区</h3>
<pre><code class="language-bash">git checkout [filename]
</code></pre>
<h3 id="恢复暂存区的所有文件到工作区">恢复暂存区的所有文件到工作区</h3>
<pre><code class="language-bash">git checkout .
</code></pre>
]]></content>
    </entry>
</feed>